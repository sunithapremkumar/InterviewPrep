
Linked in interview Qn:
/**
 * This is the interface that represents nested lists.
 * You should not implement it, or speculate about its implementation.
 */
public interface NestedInteger
{
    /** @return true if this NestedInteger holds a single integer, rather than a nested list */
    boolean isInteger();
 
    /** @return the single integer that this NestedInteger holds, if it holds a single integer
     * Return null if this NestedInteger holds a nested list */
    Integer getInteger();
 
    /** @return the nested list that this NestedInteger holds, if it holds a nested list
     * Return null if this NestedInteger holds a single integer */
    List<NestedInteger> getList();
}


/**
 * Given a nested list of integers, returns the sum of all integers in the list weighted by their depth
 * For example, given the list {{1,1},2,{1,1}} the function should return 10 (four 1's at depth 2, one 2 at depth 1) 2*1 + (1 + 1 + 1 + 1) * 2 = 10
 * Given the list {1,{4,{6}}} the function should return 27 (one 1 at depth 1, one 4 at depth 2, and one 6 at depth 3)
 */
public int depthSum (List<NestedInteger> input)
{
    return calc(input, 1);
}


public int calc(List<NestedInteger> input, int depth ){

if(input == null) return 0;
 Map
 int sum =0 ;
 for(NestedInteger item: input){ 
  if(!item.isInteger()){   
      sum += calc(item.getList(), depth++);
  
  }
  else{
       sum += item.getInteger();
  }
  
}
 map.put(depth, sum);
return sum;
}

Ex: 1 {{1,1},2,{1,1}}
 
() 2 () -> weight = 2
/ \ /\
1 1 1 1 -> weight = 1
 
2 * 2 + (1*1 + 1*1 + 1*1+ 1*1) = 8
 
* Given the list {1,{4,{6}}} the function should return 17 (one 1 with weight 3, one 4 with weight 2, and one 6 with weight 1)
 
Ex 2: {{{6},4},1}
(), 1 -> weight = 3
|
(), 4 -> weight = 2
|
6 -> weight = 1
 
Ex 3: {{1,2},3,{4,{6}, 5}}
  
() 3 ()         -> weight = 3 (depth of tree = 3)
/ \  / \ \
1 2  4 (), 5    -> weight = 2
         |
         6      -> weight = 1    
     
(3 * 3) + (1 + 2 + 4 + 5) * 2 + ( 6 * 1  ) = 9 + 24  + 6 =  39


/**
 * Given a nested list of integers, returns the sum of all integers in the list weighted by their reversed depth.
 * For example, given the list {{1,1},2,{1,1}} the deepest level is 2. Thus the function should return 8 (four 1's with weight 1, one 2 with weight 2)
 * Given the list {1,{4,{6}}} the function should return 17 (one 1 with weight 3, one 4 with weight 2, and one 6 with weight 1)
 */
public int reverseDepthSum (List<NestedInteger> input)
{
    // implementation here
}




Ebay:

given number 'n' find all combinations of it and do product and find the max product.
Sort the array of numbers based on the digits in first place and if they are same then use the digit in second place and so on